/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 scientist_rigged__animated.glb -t -k 
Author: hvp0926 (https://sketchfab.com/hvp0926)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/scientist-rigged-animated-7dae1edc8b504f999b5ae1181a3573ca
Title: Scientist (Rigged + Animated)
*/

import * as THREE from 'three'
import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { type GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { TalkMachineContext } from '../../../machines/talkMachine.context'

type GLTFResult = GLTF & {
  nodes: {
    Object_7: THREE.SkinnedMesh
    Object_8: THREE.SkinnedMesh
    Object_9: THREE.SkinnedMesh
    Object_11: THREE.SkinnedMesh
    Object_12: THREE.SkinnedMesh
    Object_13: THREE.SkinnedMesh
    Object_15: THREE.SkinnedMesh
    Object_16: THREE.SkinnedMesh
    Object_17: THREE.SkinnedMesh
    Object_19: THREE.SkinnedMesh
    Object_20: THREE.SkinnedMesh
    Object_21: THREE.SkinnedMesh
    Object_23: THREE.SkinnedMesh
    Object_24: THREE.SkinnedMesh
    Object_25: THREE.SkinnedMesh
    Object_27: THREE.SkinnedMesh
    GLTF_created_0_rootJoint: THREE.Bone
  }
  materials: {
    ['einstein_head.bmp']: THREE.MeshStandardMaterial
    ['einstein_top.bmp']: THREE.MeshStandardMaterial
    ['sci_mouth.BMP']: THREE.MeshStandardMaterial
    ['luther_head.bmp']: THREE.MeshStandardMaterial
    ['luther_top.bmp']: THREE.MeshStandardMaterial
    ['walter_head.bmp']: THREE.MeshStandardMaterial
    ['walter_top.bmp']: THREE.MeshStandardMaterial
    ['slick_face.bmp']: THREE.MeshStandardMaterial
    ['slick_top.bmp']: THREE.MeshStandardMaterial
    ['DC_sci_body.BMP']: THREE.MeshStandardMaterial
    ['DC_sci_coat.BMP']: THREE.MeshStandardMaterial
    ['DC_sci_hands.BMP']: THREE.MeshStandardMaterial
    ['sci_needle.BMP']: THREE.MeshStandardMaterial
  }
}

type ActionName =
  | '180_Left'
  | '180_Right'
  | 'barnacled1'
  | 'barnacled2'
  | 'barnacled3'
  | 'barnacled4'
  | 'beatdoor'
  | 'buysoda'
  | 'c1a0_catwalk'
  | 'c1a0_catwalkidle'
  | 'c1a4_dying_speech'
  | 'c1a4_wounded_idle'
  | 'ceiling_dangle'
  | 'checktie'
  | 'coffee'
  | 'console'
  | 'converse1'
  | 'converse2'
  | 'cowering_in_corner'
  | 'cprscientist'
  | 'cprscientistrevive'
  | 'crouch'
  | 'crouch_idle'
  | 'crouch_idle2'
  | 'crouch_idle3'
  | 'crouch_idle3_2'
  | 'crouchstand'
  | 'dead_sitting'
  | 'dead_table1'
  | 'dead_table2'
  | 'dead_table3'
  | 'deskidle'
  | 'diebackward'
  | 'dieforward'
  | 'dieforward1'
  | 'diesimple'
  | 'diesimple_rose'
  | 'divewindow'
  | 'eye_wipe'
  | 'fall_elevator'
  | 'fear1'
  | 'fear2'
  | 'flinch'
  | 'flinch1'
  | 'franticbutton'
  | 'give_shot'
  | 'gluonshow'
  | 'gutshot'
  | 'handrail'
  | 'hanging_idle'
  | 'haulscientist'
  | 'headcrabbed'
  | 'headshot'
  | 'ickyjump_sci'
  | 'idle1'
  | 'idle3'
  | 'idle4'
  | 'idle5'
  | 'idle6'
  | 'idle7'
  | 'laflinch'
  | 'llflinch'
  | 'lying_on_back'
  | 'lying_on_stomach'
  | 'no'
  | 'onguard'
  | 'panic'
  | 'panic1'
  | 'pause'
  | 'pondering'
  | 'pondering2'
  | 'pondering3'
  | 'portal'
  | 'pull_needle'
  | 'pulldoor'
  | 'push_button'
  | 'push_button2'
  | 'quicklook'
  | 'raflinch'
  | 'retina'
  | 'return_needle'
  | 'rlflinch'
  | 'rocketcrawl'
  | 'run'
  | 'run1'
  | 'run2'
  | 'seeya'
  | 'sitidle'
  | 'sitlookleft'
  | 'sitlookright'
  | 'sitscared'
  | 'sitstand'
  | 'sitting2'
  | 'sitting3'
  | 'studycart'
  | 'tentacle_grab'
  | 'tieshoe'
  | 'ventpull1'
  | 'ventpull2'
  | 'ventpullidle1'
  | 'ventpullidle2'
  | 'walk'
  | 'walk_scared'
  | 'wave'
  | 'writeboard'
  | 'yes'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export function ScientistModel(props: JSX.IntrinsicElements['group']) {
  const [state, event] = TalkMachineContext.useActor()
  const group = useRef<THREE.Group>()
  const { nodes, materials, animations } = useGLTF('/scientist_rigged__animated.glb') as GLTFResult
  const { actions } = useAnimations<GLTFActions>(animations, group)

  const [anim, setAnim] = React.useState<ActionName>('wave')

  const lookAt = useRef(new THREE.Vector3())

  useEffect(() => {
    actions[anim].reset().fadeIn(0.5).play()
    actions[anim].timeScale = 0.5

    if (anim === 'idle5') {
      event({ type: 'triggerDialog' })
    }

    return () => {
      actions[anim].fadeOut(0.5)
    }
  }, [anim])

  useFrame(state => {
    if (!group.current) {
      return null
    }
    if (state.camera.position.distanceTo(group.current.position) < 5 && anim !== 'idle5') {
      setAnim('idle5')
    }
    lookAt.current.copy(state.camera.position).setY(group.current.position.y)
    group.current.lookAt(lookAt.current)
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="scientistqc_skeleton_53">
                <group name="GLTF_created_0">
                  <primitive object={nodes.GLTF_created_0_rootJoint} />
                  <group name="dc_sci_(head_EINSTEIN)_47" />
                  <group name="dc_sci_(head_LUTHER)_48" />
                  <group name="dc_sci_(head_NERD)_49" />
                  <group name="dc_sci_(head_SLICK)_50" />
                  <group name="dc_sci_(headless_body)_51" />
                  <group name="scientist_needle_52" />
                  <skinnedMesh
                    castShadow
                    name="Object_7"
                    geometry={nodes.Object_7.geometry}
                    material={materials['einstein_head.bmp']}
                    skeleton={nodes.Object_7.skeleton}
                  />
                  <skinnedMesh
                    name="Object_8"
                    castShadow
                    geometry={nodes.Object_8.geometry}
                    material={materials['einstein_top.bmp']}
                    skeleton={nodes.Object_8.skeleton}
                  />
                  <skinnedMesh
                    name="Object_9"
                    castShadow
                    geometry={nodes.Object_9.geometry}
                    material={materials['sci_mouth.BMP']}
                    skeleton={nodes.Object_9.skeleton}
                  />
                  <skinnedMesh
                    name="Object_11"
                    castShadow
                    geometry={nodes.Object_11.geometry}
                    material={materials['luther_head.bmp']}
                    skeleton={nodes.Object_11.skeleton}
                  />
                  <skinnedMesh
                    name="Object_12"
                    geometry={nodes.Object_12.geometry}
                    castShadow
                    material={materials['sci_mouth.BMP']}
                    skeleton={nodes.Object_12.skeleton}
                  />
                  <skinnedMesh
                    name="Object_13"
                    geometry={nodes.Object_13.geometry}
                    castShadow
                    material={materials['luther_top.bmp']}
                    skeleton={nodes.Object_13.skeleton}
                  />
                  <skinnedMesh
                    name="Object_15"
                    geometry={nodes.Object_15.geometry}
                    castShadow
                    material={materials['walter_head.bmp']}
                    skeleton={nodes.Object_15.skeleton}
                  />
                  <skinnedMesh
                    name="Object_16"
                    geometry={nodes.Object_16.geometry}
                    material={materials['walter_top.bmp']}
                    castShadow
                    skeleton={nodes.Object_16.skeleton}
                  />
                  <skinnedMesh
                    name="Object_17"
                    castShadow
                    geometry={nodes.Object_17.geometry}
                    material={materials['sci_mouth.BMP']}
                    skeleton={nodes.Object_17.skeleton}
                  />
                  <skinnedMesh
                    name="Object_19"
                    geometry={nodes.Object_19.geometry}
                    castShadow
                    material={materials['slick_face.bmp']}
                    skeleton={nodes.Object_19.skeleton}
                  />
                  <skinnedMesh
                    name="Object_20"
                    geometry={nodes.Object_20.geometry}
                    material={materials['sci_mouth.BMP']}
                    castShadow
                    skeleton={nodes.Object_20.skeleton}
                  />
                  <skinnedMesh
                    name="Object_21"
                    geometry={nodes.Object_21.geometry}
                    material={materials['slick_top.bmp']}
                    skeleton={nodes.Object_21.skeleton}
                    castShadow
                  />
                  <skinnedMesh
                    name="Object_23"
                    castShadow
                    geometry={nodes.Object_23.geometry}
                    material={materials['DC_sci_body.BMP']}
                    skeleton={nodes.Object_23.skeleton}
                  />
                  <skinnedMesh
                    name="Object_24"
                    geometry={nodes.Object_24.geometry}
                    castShadow
                    material={materials['DC_sci_coat.BMP']}
                    skeleton={nodes.Object_24.skeleton}
                  />
                  <skinnedMesh
                    name="Object_25"
                    geometry={nodes.Object_25.geometry}
                    castShadow
                    material={materials['DC_sci_hands.BMP']}
                    skeleton={nodes.Object_25.skeleton}
                  />
                  <skinnedMesh
                    name="Object_27"
                    geometry={nodes.Object_27.geometry}
                    castShadow
                    material={materials['sci_needle.BMP']}
                    skeleton={nodes.Object_27.skeleton}
                  />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/scientist_rigged__animated.glb')
