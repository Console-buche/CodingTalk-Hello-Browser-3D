/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 psycanon.gltf -o psycanon -t -k 
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Object_4: THREE.Mesh
    Object_6: THREE.Mesh
    Object_8: THREE.Mesh
    Object_10: THREE.Mesh
  }
  materials: {
    material_0: THREE.MeshStandardMaterial
    material_1: THREE.MeshStandardMaterial
    material_2: THREE.MeshStandardMaterial
    material_3: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export function Model(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/psycanon.gltf') as GLTFResult
  return (
    <group {...props} dispose={null}>
      <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={0.733}>
        <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
          <mesh name="Object_4" geometry={nodes.Object_4.geometry} material={materials.material_0} position={[0.022, 0.059, 0.336]} rotation={[-Math.PI / 2, 0, 0]} />
          <mesh name="Object_6" geometry={nodes.Object_6.geometry} material={materials.material_1} position={[0.014, 0.057, 0.223]} rotation={[-Math.PI / 2, 0, 0]} />
          <mesh name="Object_8" geometry={nodes.Object_8.geometry} material={materials.material_2} position={[0.104, 0.105, -0.093]} rotation={[-Math.PI / 2, 0, 0]} />
          <mesh name="Object_10" geometry={nodes.Object_10.geometry} material={materials.material_3} position={[0, 0.08, 0.362]} rotation={[-Math.PI / 2, 0, 0]} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/psycanon.gltf')
